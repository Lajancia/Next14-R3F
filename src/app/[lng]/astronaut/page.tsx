'use client'
import { Suspense, useEffect, useState, useRef } from 'react'
import { Canvas, useFrame } from '@react-three/fiber'
import { useGLTF, useTexture, useAnimations } from '@react-three/drei'
import { easing } from 'maath'

function Rig() {
  return useFrame((state, delta) => {
    easing.damp3(state.camera.position, [1 + state.mouse.x / 4, 1.5 + state.mouse.y / 4, 2.5], 0.2, delta)
  })
}

export default function App() {
  return (
    <Canvas shadows camera={{ position: [1, 1.5, 2.5], fov: 50 }}>
      <ambientLight />
      <directionalLight position={[-5, 5, 5]} castShadow shadow-mapSize={1024} />
      <group position={[0, -1, 0]}>
        <Suspense fallback={null}>
          <Model />
        </Suspense>
      </group>
      <mesh rotation={[-0.5 * Math.PI, 0, 0]} position={[0, -1, 0]} receiveShadow>
        <planeGeometry args={[10, 10, 1, 1]} />
        <shadowMaterial transparent opacity={0.2} />
      </mesh>
      <Rig />
    </Canvas>
  )
}

/*
This file was generated by https://github.com/pmndrs/gltfjsx and then
customized manually. It uses drei's new useAnimations hook which extracts
all actions and sets up a THREE.AnimationMixer for it so that you don't have to.
All of the assets actions, action-names and clips are available in its output. 
*/

// @ts-expect-error type ignore
function Model(props) {
  const halo = useRef()
  // Fetch model and a separate texture
  const { scene, nodes, animations, materials } = useGLTF('/astronaut_animation.glb')
  scene.castShadow = true
  scene.receiveShadow = true
  // Extract animation actions
  const { ref, actions, names } = useAnimations(animations)
  // Hover and animation-index states
  const [hovered, setHovered] = useState(false)
  const [index, setIndex] = useState(0)

  // Change cursor on hover-state
  useEffect(() => void (document.body.style.cursor = hovered ? 'pointer' : 'auto'), [hovered])

  // Change animation when the index changes
  // @ts-expect-error type ignore
  useEffect(() => {
    console.log('name', names, index, names[index])
    console.log(materials, materials.CLAY)

    // @ts-expect-error type ignore
    actions[names[index]].reset().fadeIn(0.5).play()
    // @ts-expect-error type ignore
    return () => actions[names[index]].fadeOut(0.5)
  }, [index, actions, names])

  useFrame((state, delta) => {
    // @ts-expect-error type ignore
    easing.damp3(halo.current.scale, hovered ? 1.15 : 1, 0.2, delta)
    // @ts-expect-error type ignore
    easing.dampC(halo.current.material.color, hovered ? 'hotpink' : 'aquamarine', 0.2, delta)
  })

  return (
    <group ref={ref} {...props} dispose={null}>
      <group rotation={[Math.PI / 2, 0, 0]} scale={0.01}>
        <primitive object={nodes.mixamorigHips} />
        <skinnedMesh
          castShadow
          receiveShadow
          geometry={nodes.astronaut_1.geometry}
          material={materials.CLAY}
          skeleton={nodes.astronaut_1.skeleton}
        />
        <skinnedMesh
          castShadow
          receiveShadow
          geometry={nodes.astronaut_2.geometry}
          material={materials.CLAY}
          skeleton={nodes.astronaut_2.skeleton}
        />
        <skinnedMesh
          castShadow
          receiveShadow
          geometry={nodes.astronaut_3.geometry}
          material={materials.CLAY}
          skeleton={nodes.astronaut_3.skeleton}
        />
      </group>

      <mesh
        //  @ts-expect-error type ignore
        ref={halo}
        receiveShadow
        position={[0, 1, -1]}
        onClick={(e: any) => {
          setIndex(Math.trunc((index + 1) % names.length))
        }}
      >
        <circleGeometry args={[1, 64]} />
        <meshStandardMaterial />
      </mesh>
    </group>
  )
}
